name: Publish Docker image

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Nginx version (optional, if not provided will be auto-detected)'
        required: false
        type: string
  schedule:
    # 每天 UTC 时间 2:00 (北京时间 10:00) 运行
    - cron: '0 2 * * *'

env:
  IMAGE_NAME: nginx

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: debian
            branch: stable
            install_pkgs: apt-get update && apt-get install -y --no-install-recommends build-essential git libpcre3-dev libssl-dev zlib1g-dev libbrotli-dev wget
          - platform: debian
            branch: mainline
            install_pkgs: apt-get update && apt-get install -y --no-install-recommends build-essential git libpcre3-dev libssl-dev zlib1g-dev libbrotli-dev wget
          - platform: alpine
            branch: stable
            install_pkgs: apk add --update --no-cache build-base git pcre-dev openssl-dev zlib-dev linux-headers brotli-dev
          - platform: alpine
            branch: mainline
            install_pkgs: apk add --update --no-cache build-base git pcre-dev openssl-dev zlib-dev linux-headers brotli-dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version and check if build needed
        id: version_check
        run: |
          echo "检查 ${{ matrix.platform }}-${{ matrix.branch }} 版本..."
          
          # 如果手动指定了版本且当前是mainline分支，则跳过构建
          if [ -n "${{ inputs.version }}" ] && [ "${{ matrix.branch }}" = "mainline" ]; then
            echo "手动指定版本时跳过mainline分支构建"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # 确定版本
          if [ -n "${{ inputs.version }}" ]; then
            # 使用手动指定的版本
            version="${{ inputs.version }}"
            echo "手动指定版本: $version"
          else
            # 自动检测官方镜像版本
            if [ "${{ matrix.platform }}" = "debian" ]; then
              IMAGE="nginx:${{ matrix.branch }}"
            else
              IMAGE="nginx:${{ matrix.branch }}-${{ matrix.platform }}"
            fi
            
            # 获取官方镜像版本
            version=$(docker pull $IMAGE > /dev/null 2>&1 && docker inspect $IMAGE 2>/dev/null | grep NGINX_VERSION | head -n 1 | sed 's/.*"NGINX_VERSION=//g' | sed 's/",.*//g')
            echo "官方 ${{ matrix.platform }}-${{ matrix.branch }} 版本: $version"
          fi
          
          if [ -z "$version" ]; then
            echo "无法获取版本信息，跳过构建"
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # 确定镜像标签
          if [ "${{ matrix.platform }}" = "debian" ]; then
            tag="$version"
          else
            tag="$version-${{ matrix.platform }}"
          fi
          
          # 检查镜像是否已存在（使用 manifest inspect 避免下载整个镜像）
          image_name="ghcr.io/${{ github.repository_owner }}/nginx-brotli:$tag"
          echo "检查镜像是否存在: $image_name"
          if docker manifest inspect "$image_name" > /dev/null 2>&1; then
            echo "镜像已存在: $tag，跳过构建"
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "镜像不存在: $tag，需要构建"
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi
          
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Extract metadata (tags, labels) for Docker
        if: steps.version_check.outputs.skip == 'false'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/nginx-brotli
          tags: |
            # 手动输入版本时只输出版本号
            type=raw,value=${{ inputs.version }},enable=${{ inputs.version && matrix.platform == 'debian' }}
            type=raw,value=${{ inputs.version }}-${{ matrix.platform }},enable=${{ inputs.version && matrix.platform != 'debian' }}
            # 自动检测版本时使用完整的semver格式
            type=semver,pattern={{version}},value=${{ steps.version_check.outputs.version }},enable=${{ !inputs.version && matrix.platform == 'debian' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version_check.outputs.version }},enable=${{ !inputs.version && matrix.platform == 'debian' }}
            type=raw,value=${{ matrix.branch }},enable=${{ !inputs.version && matrix.platform == 'debian' && matrix.branch != 'mainline' }}
            type=raw,value=latest,enable=${{ !inputs.version && matrix.platform == 'debian' && matrix.branch == 'mainline' }}
            # 其它平台（如alpine）自动检测版本
            type=semver,pattern={{version}}-${{ matrix.platform }},value=${{ steps.version_check.outputs.version }},enable=${{ !inputs.version && matrix.platform != 'debian' }}
            type=semver,pattern={{major}}.{{minor}}-${{ matrix.platform }},value=${{ steps.version_check.outputs.version }},enable=${{ !inputs.version && matrix.platform != 'debian' }}
            type=raw,value=${{ matrix.branch }}-${{ matrix.platform }},enable=${{ !inputs.version && matrix.platform != 'debian' && matrix.branch != 'mainline' }}
            type=raw,value=${{ matrix.platform }},enable=${{ !inputs.version && matrix.platform != 'debian' && matrix.branch == 'mainline' }}

      - name: Build and push Docker image
        if: steps.version_check.outputs.skip == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NGINX_IMAGE=nginx:${{ steps.version_check.outputs.version }}${{ matrix.platform != 'debian' && format('-{0}', matrix.platform) || '' }}
            NGINX_VERSION=${{ steps.version_check.outputs.version }}
            INSTALL_PKGS=${{ matrix.install_pkgs }}
