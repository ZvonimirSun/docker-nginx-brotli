name: Publish Docker image

on:
  workflow_dispatch:

env:
  IMAGE_NAME: nginx

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: debian
            version: stable
            nginx_image: nginx:stable
            install_pkgs: apt-get update && apt-get install -y --no-install-recommends build-essential git libpcre3-dev libssl-dev zlib1g-dev libbrotli-dev wget
          - platform: debian
            version: mainline
            nginx_image: nginx:mainline
            install_pkgs: apt-get update && apt-get install -y --no-install-recommends build-essential git libpcre3-dev libssl-dev zlib1g-dev libbrotli-dev wget
          - platform: alpine
            version: stable
            nginx_image: nginx:stable-alpine
            install_pkgs: apk add --update --no-cache build-base git pcre-dev openssl-dev zlib-dev linux-headers brotli-dev
          - platform: alpine
            version: mainline
            nginx_image: nginx:mainline-alpine
            install_pkgs: apk add --update --no-cache build-base git pcre-dev openssl-dev zlib-dev linux-headers brotli-dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Version
        id: get_version
        run: echo "version=$(docker pull nginx:${{ matrix.version }} > /dev/null && docker inspect nginx:${{ matrix.version }} |grep NGINX_VERSION |head -n 1|sed 's/                "NGINX_VERSION=//g' | sed 's/",//g')" >> "$GITHUB_OUTPUT"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/nginx-brotli
          tags: |
            # debian 主线和稳定
            type=semver,pattern={{version}},value=${{ steps.get_version.outputs.version }},enable=${{ matrix.platform == 'debian' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_version.outputs.version }},enable=${{ matrix.platform == 'debian' }}
            type=raw,value=${{ matrix.version }},enable=${{ matrix.platform == 'debian' && matrix.version != 'mainline' }}
            type=raw,value=latest,enable=${{ matrix.platform == 'debian' && matrix.version == 'mainline' }}
            # 其它平台（如alpine）
            type=semver,pattern={{version}}-${{ matrix.platform }},value=${{ steps.get_version.outputs.version }},enable=${{ matrix.platform != 'debian' }}
            type=semver,pattern={{major}}.{{minor}}-${{ matrix.platform }},value=${{ steps.get_version.outputs.version }},enable=${{ matrix.platform != 'debian' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.platform }},enable=${{ matrix.platform != 'debian' && matrix.version != 'mainline' }}
            type=raw,value=${{ matrix.platform }},enable=${{ matrix.platform != 'debian' && matrix.version == 'mainline' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NGINX_IMAGE=${{ matrix.nginx_image }}
            NGINX_VERSION=${{ steps.get_version.outputs.version }}
            INSTALL_PKGS=${{ matrix.install_pkgs }}
